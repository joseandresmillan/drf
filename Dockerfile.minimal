# Dockerfile ultra-optimizado para droplets pequeños
FROM node:18-alpine AS frontend-builder

# Establecer directorio de trabajo
WORKDIR /app

# Configurar memoria mínima para droplets pequeños
ENV NODE_OPTIONS="--max-old-space-size=1024"
ENV GENERATE_SOURCEMAP=false
ENV INLINE_RUNTIME_CHUNK=false
ENV CI=true

# Copiar solo package files primero
COPY package*.json ./

# Instalar dependencias con configuración mínima
RUN npm ci --legacy-peer-deps --production=false --silent

# Limpiar cache inmediatamente
RUN npm cache clean --force

# Copiar código fuente en etapas
COPY public/ ./public/
COPY src/ ./src/
COPY tailwind.config.js tsconfig.json ./

# Build con configuración ultra-optimizada
RUN NODE_OPTIONS="--max-old-space-size=1024" \
    GENERATE_SOURCEMAP=false \
    npm run build

# Limpiar archivos innecesarios después del build
RUN rm -rf node_modules src public *.json

#################################################
# Segunda etapa: Django ultra-ligero
#################################################
FROM python:3.11-alpine

# Configurar directorio de trabajo
WORKDIR /var/www

# Instalar dependencias mínimas del sistema
RUN apk add --no-cache gcc musl-dev

# Copiar requirements y instalar dependencias Python
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copiar código Django
COPY . .

# Copiar build de React desde la primera etapa
COPY --from=frontend-builder /app/build ./build

# Recopilar archivos estáticos
RUN python manage.py collectstatic --noinput

# Limpiar archivos temporales
RUN rm -rf /tmp/* /var/cache/apk/*

# Exponer puerto
EXPOSE 80

# Comando de inicio
CMD ["python", "manage.py", "runserver", "0.0.0.0:80"]

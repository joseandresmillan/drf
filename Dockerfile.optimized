# Dockerfile optimizado para memoria - Agencia de Marketing
FROM node:18-alpine AS frontend-builder

# Establecer directorio de trabajo
WORKDIR /app

# Configurar variables de ambiente para optimizar memoria
ENV NODE_OPTIONS="--max-old-space-size=4096 --optimize-for-size --gc-interval=100"
ENV GENERATE_SOURCEMAP=false
ENV INLINE_RUNTIME_CHUNK=false

# Instalar dependencias del sistema necesarias
RUN apk add --no-cache git

# Copiar archivos de configuración
COPY package*.json ./
COPY tailwind.config.js ./
COPY tsconfig.json ./

# Instalar dependencias con optimizaciones
RUN npm ci --legacy-peer-deps --no-audit --prefer-offline

# Limpiar cache de npm para liberar memoria
RUN npm cache clean --force

# Copiar código fuente
COPY src/ ./src/
COPY public/ ./public/

# Construir aplicación con configuraciones optimizadas
RUN echo "🚀 Building React app with memory optimizations..." && \
    npm run build && \
    echo "✅ React build completed successfully!"

# Verificar que build fue exitoso
RUN ls -la build/ && echo "Build directory contents verified"

#################################################
# Segunda etapa: Django + contenido estático
#################################################
FROM python:3.11-slim

# Configurar directorio de trabajo
WORKDIR /var/www

# Instalar dependencias del sistema
RUN apt-get update && apt-get install -y \
    gcc \
    && rm -rf /var/lib/apt/lists/*

# Copiar requirements y instalar dependencias Python
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copiar código Django
COPY . .

# Copiar build de React desde la primera etapa
COPY --from=frontend-builder /app/build ./build

# Verificar que el build fue copiado correctamente
RUN echo "📁 Verificando directorios copiados:" && \
    ls -la build/ && \
    ls -la build/static/ 2>/dev/null || echo "No static dir yet" && \
    echo "🔍 Django files:" && \
    ls -la manage.py core/

# Recopilar archivos estáticos
RUN python manage.py collectstatic --noinput --verbosity=2

# Verificar archivos estáticos recopilados
RUN echo "📦 Archivos estáticos recopilados:" && \
    ls -la staticfiles/ && \
    ls -la staticfiles/media/ 2>/dev/null || echo "No media in staticfiles"

# Exponer puerto
EXPOSE 80

# Comando de inicio
CMD ["python", "manage.py", "runserver", "0.0.0.0:80"]
